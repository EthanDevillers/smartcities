import machine
from machine import ADC, Pin, PWM
from utime import sleep

BUTTON = Pin(16, Pin.IN, Pin.PULL_DOWN)
LED = Pin(18, Pin.OUT)
pot = ADC(0)
buzzer = PWM(Pin(27))
buzzer.freq(440)

cpt = 0
#Notes (frequence)
AS3 = 233
C4 = 261
CS4 = 277
D4 = 294
DS4 = 311
E4 = 329
F4 = 349
FS4 = 370
G4 = 392
GS4 = 415
A4 = 440
AS4 = 466
B4 = 494
C5 = 523
CS5 = 554
D5 = 587
DS5 = 622
E5 = 659
F5 = 698
FS5 = 740
G5 = 784
GS5 = 830
A5 = 880
AS5 = 932
B5 = 988
C6 = 1047
GS5 = 830
AS5 = 932
G5 = 784
REST = 0

melody_twinkle = [
    (C4, 0.4), (C4, 0.4), (G4, 0.4), (G4, 0.4), (A4, 0.4), (A4, 0.4), (G4, 0.8),
    (F4, 0.4), (F4, 0.4), (E4, 0.4), (E4, 0.4), (D4, 0.4), (D4, 0.4), (C4, 0.8),
    (G4, 0.4), (G4, 0.4), (F4, 0.4), (F4, 0.4), (E4, 0.4), (E4, 0.4), (D4, 0.8),
    (G4, 0.4), (G4, 0.4), (F4, 0.4), (F4, 0.4), (E4, 0.4), (E4, 0.4), (D4, 0.8),
    (C4, 0.4), (C4, 0.4), (G4, 0.4), (G4, 0.4), (A4, 0.4), (A4, 0.4), (G4, 0.8),
    (F4, 0.4), (F4, 0.4), (E4, 0.4), (E4, 0.4), (D4, 0.4), (D4, 0.4), (C4, 0.8),
]
melody_GoT = [
    (G4, 0.31), (C4, 0.31), (DS4, 0.16), (F4, 0.16), (G4, 0.31), (C4, 0.31), (DS4, 0.16), (F4, 0.16),
    (G4, 0.31), (C4, 0.31), (DS4, 0.16), (F4, 0.16), (G4, 0.31), (C4, 0.31), (DS4, 0.16), (F4, 0.16),
    (G4, 0.31), (C4, 0.31), (E4, 0.16), (F4, 0.16), (G4, 0.31), (C4, 0.31), (E4, 0.16), (F4, 0.16),
    (G4, 0.31), (C4, 0.31), (E4, 0.16), (F4, 0.16), (G4, 0.31), (C4, 0.31), (E4, 0.16), (F4, 0.16),
    (G4, 0.62), (C4, 0.62),
    (DS4, 0.16), (F4, 0.16), (G4, 0.62), (C4, 0.62), (DS4, 0.16), (F4, 0.16),
    (D4, 2.5),
    (F4, 0.62), (AS3, 0.62),
    (DS4, 0.16), (D4, 0.16), (F4, 0.62), (AS3, 0.62),
    (DS4, 0.16), (D4, 0.16), (C4, 2.5),
    (G4, 0.62), (C4, 0.62),
    (DS4, 0.16), (F4, 0.16), (G4, 0.62), (C4, 0.62), (DS4, 0.16), (F4, 0.16),
    (D4, 2.5),
    (F4, 0.62), (AS3, 0.62),
    (DS4, 0.16), (D4, 0.16), (F4, 0.62), (AS3, 0.62),
    (DS4, 0.16), (D4, 0.16), (C4, 2.5),
    (G4, 0.62), (C4, 0.62),
    (DS4, 0.16), (F4, 0.16), (G4, 0.62), (C4, 0.62), (DS4, 0.16), (F4, 0.16),
    (D4, 1.25),
    (F4, 0.62), (AS3, 0.62),
    (D4, 0.31), (DS4, 0.31), (D4, 0.31), (AS3, 0.31),
    (C4, 2.5),
    (C5, 1.25),
    (AS4, 1.25),
    (C4, 1.25),
    (G4, 1.25),
    (DS4, 1.25),
    (DS4, 0.62), (F4, 0.62),
    (G4, 2.5),
    (C5, 1.25),
    (AS4, 1.25),
    (C4, 1.25),
    (G4, 1.25),
    (DS4, 1.25),
    (DS4, 0.62), (D4, 0.62),
    (C5, 0.31), (G4, 0.31), (GS4, 0.16), (AS4, 0.16), (C5, 0.31), (G4, 0.31), (GS4, 0.16), (AS4, 0.16),
    (C5, 0.31), (G4, 0.31), (GS4, 0.16), (AS4, 0.16), (C5, 0.31), (G4, 0.31), (GS4, 0.16), (AS4, 0.16),
    (REST, 0.62), (GS5, 0.16), (AS5, 0.16), (C6, 0.31), (G5, 0.31), (GS5, 0.16), (AS5, 0.16),
    (C6, 0.31), (G5, 0.16), (GS5, 0.16), (AS5, 0.16), (C6, 0.31), (G5, 0.31), (GS5, 0.16), (AS5, 0.16)
]
melody_black_pearl = [
    (E4,0.125), (G4,0.125), (A4,0.25), (A4,0.125), (REST,0.125),
    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (C5,0.125), (D5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (A4,0.125), (G4,0.125), (A4,0.375), (REST,0.125),

    (E4,0.125), (G4,0.125), (A4,0.25), (A4,0.125), (REST,0.125),
    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (C5,0.125), (D5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (A4,0.125), (G4,0.125), (A4,0.375), (REST,0.125),

    (E4,0.125), (G4,0.125), (A4,0.25), (A4,0.125), (REST,0.125),
    (A4,0.125), (C5,0.125), (D5,0.25), (D5,0.125), (REST,0.125),
    (D5,0.125), (E5,0.125), (F5,0.25), (F5,0.125), (REST,0.125),
    (E5,0.125), (D5,0.125), (E5,0.125), (A4,0.25), (REST,0.125),

    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (D5,0.25), (E5,0.125), (A4,0.25), (REST,0.125),
    (A4,0.125), (C5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (C5,0.125), (A4,0.125), (B4,0.375), (REST,0.375),

    (A4,0.25), (A4,0.125),
    # Repeat of first part
    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (C5,0.125), (D5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (A4,0.125), (G4,0.125), (A4,0.375), (REST,0.125),

    (E4,0.125), (G4,0.125), (A4,0.25), (A4,0.125), (REST,0.125),
    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (C5,0.125), (D5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (A4,0.125), (G4,0.125), (A4,0.375), (REST,0.125),

    (E4,0.125), (G4,0.125), (A4,0.25), (A4,0.125), (REST,0.125),
    (A4,0.125), (C5,0.125), (D5,0.25), (D5,0.125), (REST,0.125),
    (D5,0.125), (E5,0.125), (F5,0.25), (F5,0.125), (REST,0.125),
    (E5,0.125), (D5,0.125), (E5,0.125), (A4,0.25), (REST,0.125),

    (A4,0.125), (B4,0.125), (C5,0.25), (C5,0.125), (REST,0.125),
    (D5,0.25), (E5,0.125), (A4,0.25), (REST,0.125),
    (A4,0.125), (C5,0.125), (B4,0.25), (B4,0.125), (REST,0.125),
    (C5,0.125), (A4,0.125), (B4,0.375), (REST,0.375),
    # End of repeat

    (E5,0.25), (REST,0.125), (REST,0.375), (F5,0.25), (REST,0.125), (REST,0.375),
    (E5,0.125), (E5,0.125), (REST,0.125), (G5,0.125), (REST,0.125), (E5,0.125), (D5,0.125), (REST,0.125), (REST,0.375),
    (D5,0.25), (REST,0.125), (REST,0.375), (C5,0.25), (REST,0.125), (REST,0.375),
    (B4,0.125), (C5,0.125), (REST,0.125), (B4,0.125), (REST,0.125), (A4,0.5),

    (E5,0.25), (REST,0.125), (REST,0.375), (F5,0.25), (REST,0.125), (REST,0.375),
    (E5,0.125), (E5,0.125), (REST,0.125), (G5,0.125), (REST,0.125), (E5,0.125), (D5,0.125), (REST,0.125), (REST,0.375),
    (D5,0.25), (REST,0.125), (REST,0.375), (C5,0.25), (REST,0.125), (REST,0.375),
    (B4,0.125), (C5,0.125), (REST,0.125), (B4,0.125), (REST,0.125), (A4,0.5)
]

def play_melody(melody):
    global stop_melody
    stop_melody = False
    for note, duration in melody:
        if stop_melody:
            buzzer.duty_u16(0)
            return
        if note == REST:
            buzzer.duty_u16(0)
            sleep(duration)
        else:
            pot_value = pot.read_u16()
            volume = int(pot_value/2 )
            buzzer.freq(note)
            buzzer.duty_u16(volume)
            LED.value(1)  
            sleep(duration)
            buzzer.duty_u16(0)
            LED.value(0)  
        sleep(0.05)

def Bouton(pin):
    global cpt, stop_melody
    cpt += 1
    if cpt > 3:
        cpt = 0
    stop_melody = True
    print("compteur =", cpt)
        # Attendre le relâchement pour éviter les rebonds
    while BUTTON.value():
        sleep(0.01)

BUTTON.irq(trigger=machine.Pin.IRQ_RISING, handler=Bouton)

while True:
    if cpt == 0:
        play_melody(melody_GoT)
    elif cpt == 1:
        play_melody(melody_twinkle)
    elif cpt == 2:
        play_melody(melody_black_pearl)

